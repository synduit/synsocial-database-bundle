<?php

namespace Synduit\SynsocialDatabaseBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Synduit\SynsocialDatabaseBundle\Document\Post;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends DocumentRepository
{
    public function createPost($values) {
        $post = new Post();
        $post->setCreated($values['date']);
        $post->setDomain($values['domain']);

        $this->prepareFields($post, $values);

        $dm = $this->getDocumentManager();
        $dm->persist($post);

        return $post;
    }

    public function updatePost($post, $values) {
        $post->setUpdated($values['date']);
        $this->prepareFields($post, $values);
    }

    private function prepareFields(&$post, $values) {
        $post->setName($values['name']);
        $post->setStatus($values['status']);

        if (isset($values['fbMessage'])) {
            $post->setFbMessage($values['fbMessage']);
        }
        if (isset($values['twitterMessage'])) {
            $post->setTwitterMessage($values['twitterMessage']);
        }
        if (isset($values['link'])) {
            $post->setLink($values['link']);
        }
        if (isset($values['media'])) {
            $post->setMedia($values['media']);
        }
        if (isset($values['scheduleDate'])) {
            $post->setScheduleDate($values['scheduleDate']);
        }
        $page_id = isset($values['pageId']) ? $values['pageId'] : null;
        $group_id = isset($values['groupId']) ? $values['groupId'] : null;
        $post->setPageId($page_id);
        $post->setGroupId($group_id);
    }

    public function findPostsContainsQuery($domain, $parameters, $limit = null,
     $offset = null) {
        if (!empty($parameters['status'])) {
            $query = array(
                'domain' => $domain->getId(),
                'active' => true,
                'status' => new \MongoRegex('/^' . $parameters['status'] . '$/i'),
            );
        }
        else {
            $query = array(
                'domain' => $domain->getId(),
                'active' => true,
            );
        }
        $sort = array('scheduleDate' => $parameters['sort']);

        return $this->findBy($query, $sort, $limit, $offset);
    }

    public function deletePost($post) {
        $post->setActive(false);
    }

    public function schedulePost($post, $values)
    {
        $post->setScheduleDate($values['scheduleDate']);
    }

    public function findPostForPosting($last_post_cron_time, $current_time, $status)
    {
        return $this->findBy(
            array(
                'scheduleDate' => array(
                    '$gte' => $last_post_cron_time,
                    '$lte' => $current_time,
                ),
                'active' => true,
                'status' => $status,
            )
        );
    }

    public function findPostByName($domain, $name)
    {
        return $this->findOneBy(
            array(
              'name' => new \MongoRegex('/^' . $name . '$/i'),
              'domain' => $domain->getId(),
              'active' => true,
            )
        );
    }

}
